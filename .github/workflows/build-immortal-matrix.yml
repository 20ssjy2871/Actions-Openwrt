#=====================================================================================
# Description: Build Immortalwrt
# Source code repository: https://github.com/immortalwrt/immortalwrt
# Branch: master
# this action compile and upload to Release with different Arch/Target using matrix in Github actions
#=====================================================================================

name: Build Immortalwrt

on:
  repository_dispatch:
    types: [Source_Code_Update_immortalwrt, Package_Luci_Update]
  workflow_dispatch:
        
env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        TARGET: [Armvirt, X86_64, ipq40xx, ipq807x, sunxi, rockchip]
    steps:
    - name: Check All Targets
      id: check
      env:
        TARGET: ${{ matrix.TARGET }}
      run: |
        export FEEDS_CONF="$(echo ${TARGET}/feeds.conf.immortal)"
        export CONFIG_FILE="$(echo ${TARGET}/.conf.immortal)"
        export DIY_P1_SH="$(echo ${TARGET}/diy-part1.sh)"
        export DIY_P2_SH="$(echo ${TARGET}/diy-part2.sh)"

        echo "FEEDS_CONF=$FEEDS_CONF" >> $GITHUB_ENV
        echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
        echo "DIY_P1_SH=$DIY_P1_SH" >> $GITHUB_ENV
        echo "DIY_P2_SH=$DIY_P2_SH" >> $GITHUB_ENV

        if [ $TARGET == "Armvirt" ]
        then
          export DEVICE="Amlogic/斐讯N1"
        elif [ $TARGET == "ipq40xx" ]
        then
          export DEVICE="ASUS ACRH-17"
        elif [ $TARGET == "ipq807x" ]
        then
          export DEVICE="Redmi AX6"
        elif [ $TARGET == "sunxi" ]
        then
          export DEVICE="nanoPi Neo2, R1S H5, OrangePi Zero Plus"
        elif [ $TARGET == "rockchip" ]
        then
          export DEVICE="nanoPi R2S/R4S/R5S"
        else
          export DEVICE="X86_64"
        fi

        echo "DEVICE=$DEVICE" >> $GITHUB_ENV
    
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Check server configuration
      run: |
        echo "警告⚠"
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo "已知编译成功CPU型号：8370C,8171M"
        echo "已知性能不足CPU型号：8272CL"
        echo -e "-------------- ------------CPU信息------------------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "-------------------------------内存信息-------------------------------------------"
        echo "已安装内存详细信息："
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo "-----------------------------硬盘信息---------------------------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "硬盘详情："
        df -Th
        
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E swapoff -a
        sudo -E rm -f /swapfile
        sudo -E docker image prune -a -f
        sudo -E snap set system refresh.retain=2
        sudo -E apt update -y
        sudo -E apt -y purge azure-cli dotnet* firefox ghc* google* llvm* mono* mysql* openjdk* php* zulu* powershell* msodbc* android*
        sudo -E apt -y autoremove --purge
        sudo -E apt clean
        sudo -E rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /etc/mysql /etc/php /opt/ghc
        # sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: Load custom feeds
      run: |
        [ -e ${FEEDS_CONF} ] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
        chmod +x ${DIY_P1_SH}
        cd openwrt
        $GITHUB_WORKSPACE/${DIY_P1_SH}
        echo $(head -n 5 ${CONFIG_FILE})
        
    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -d ${{ matrix.TARGET }}/files ] && mv ${{ matrix.TARGET }}/files openwrt/files
        
        echo $(head -n 5 ${CONFIG_FILE})
        
        [ -e ${CONFIG_FILE} ] && mv ${CONFIG_FILE} openwrt/.config
        
        echo $(head -n 15 openwrt/.config)
        echo $(cat ${DIY_P2_SH})
        
        chmod +x ${DIY_P2_SH}
        cd openwrt
        $GITHUB_WORKSPACE/${DIY_P2_SH}
        
#    - name: Download package
#      id: package
#      run: |
#        cd openwrt
#        make defconfig
#        make download -j8
#        find dl -size -1024c -exec ls -l {} \;
#        find dl -size -1024c -exec rm -f {} \;
#        
#    - name: Compile the firmware
#      id: compile
#      run: |
#        cd openwrt
#        echo -e "$(nproc) thread compile"
#        make -j$(nproc) || make -j1 V=s
#        echo "COMPILE_STATUS=success" >> $GITHUB_ENV
#        
#        export FILE_DATE="$(date +"%y.%-m.%-d")"
#        echo "FILE_DATE=$FILE_DATE" >> $GITHUB_ENV
#        
#        # grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
#        # echo 'sunxi_cortexa53' > DEVICE_NAME
#        # [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
#        
#        if [[ "${{ matrix.TARGET }}" == "Armvirt" || "${{ matrix.TARGET }}" == "X86_64" ]]
#        then
#          export RELEASE_TAG="Immortalwrt_${{ matrix.TARGET }}"
#        else
#          export RELEASE_TAG="v${FILE_DATE}-${{ matrix.TARGET }}"
#        fi
#        echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
#        
#    - name: Check space usage
#      if: (!cancelled())
#      run: df -hT
#
#    - name: Upload bin directory
#      uses: actions/upload-artifact@main
#      if: env.COMPILE_STATUS == 'success' && env.UPLOAD_BIN_DIR == 'true'
#      with:
#        name: OpenWrt_bin_${{ matrix.TARGET }}_${{ env.FILE_DATE }}
#        path: openwrt/bin
#
#    - name: Organize files
#      id: organize
#      if: env.COMPILE_STATUS == 'success' && !cancelled()
#      run: |
#        cd openwrt/bin/targets/*/*
#        rm -rf packages
#        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
#        echo "ORGANIZE_STATUS=success" >> $GITHUB_ENV
#        
#    - name: Upload firmware to action artifact
#      uses: actions/upload-artifact@main
#      if: env.ORGANIZE_STATUS == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
#      with:
#        name: OpenWrt_firmware_${{ matrix.TARGET }}
#        path: ${{ env.FIRMWARE }}
#
#    - name: Upload OpenWrt Firmware to Release
#      id: release
#      uses: ncipollo/release-action@main
#      if: env.ORGANIZE_STATUS == 'success' && env.UPLOAD_RELEASE == 'true' && (!cancelled())
#      with:
#        tag: ${{ env.RELEASE_TAG }}
#        removeArtifacts: false
#        artifacts: ${{ env.FIRMWARE }}/*
#        allowUpdates: true
#        token: ${{ secrets.GH_TOKEN }}
#        body: |
#            Immortalwrt's repo
#            Target: ${{ matrix.TARGET }}
#            Device: ${{ env.DEVICE }}
#            编译时间: ${{ env.FILE_DATE }}
#                        
#            插件列表： 
#              ├ ddns
#              ├ filetransfer
#              ├ frpc
#              ├ passwall              
#              ├ OpenClash
#              ├ SmartDNS
#              ├ ttyd
#              ├ Zerotier
#              └ KMS
#              
#    - name: Delete workflow runs
#      uses: Mattraks/delete-workflow-runs@main
#      with:
#        token: ${{ secrets.GH_TOKEN }}
#        repository: ${{ github.repository }}
#        retain_days: 3
#        keep_minimum_runs: 2
#        delete_workflow_pattern: ${{ matrix.TARGET }}
#
#    - name: Remove old Releases
#      uses: dev-drprasad/delete-older-releases@master
#      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
#      with:
#        repo: ${{ github.repository }}
#        keep_latest: 3
#        delete_tag_pattern: ${{ matrix.TARGET }}
#        delete_tags: true
#      env:
#        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
#
