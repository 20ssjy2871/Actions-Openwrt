#=====================================================================================
# Description: Build OpenWrt with immortalwrt
# Source code repository: hhttps://github.com/immortalwrt/immortalwrt / Branch: master
# this action compile and upload to Release with fixed tag: OpenWrt_Armvirt
#=====================================================================================

name: Build immortalwrt for armvirt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
    
env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  FEEDS_CONF: N1/feeds.conf
  CONFIG_FILE: N1/.config
  DIY_P1_SH: N1/diy-part1.sh
  DIY_P2_SH: N1/diy-part2.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 420 # Add Time
#     if: github.event.repository.owner.id == github.event.sender.id
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Check server configuration
      run: |
        echo "警告⚠"
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo "已知编译成功CPU型号：8370C,8171M"
        echo "已知性能不足CPU型号：8272CL"
        echo -e "-------------- ------------CPU信息------------------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "-------------------------------内存信息-------------------------------------------"
        echo "已安装内存详细信息："
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo "-----------------------------硬盘信息---------------------------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "硬盘详情："
        df -Th

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/JK9Xk)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [[ -e "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
        chmod +x ${DIY_P1_SH}
        cd openwrt
        ${GITHUB_WORKSPACE}/${DIY_P1_SH}
    
    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [[ -d "files" ]] && mv -f files openwrt/files
        [[ -e "${CONFIG_FILE}" ]] && cp -f ${CONFIG_FILE} openwrt/.config
        chmod +x ${DIY_P2_SH}
        cd openwrt
        ${GITHUB_WORKSPACE}/${DIY_P2_SH}
    
    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(($(nproc) + 1)) || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y-%m-%d %H:%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT
    

    - name: Organize files
      id: organize
      if: (!cancelled())
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        
    - name: Upload firmware to action artifact
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}
        path: ${{ env.FIRMWARE }}
        

    - name: Upload OpenWrt Firmware to Release
      id: release
      uses: ncipollo/release-action@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        tag: OpenWrt_Armvirt
        removeArtifacts: false
        artifacts: ${{ env.FIRMWARE }}/*
        allowUpdates: true
        token: ${{ secrets.GH_TOKEN }}
        body: |
            ## Openwrt Armvirt based on ${{ env.REPO_URL}}
            编译时间: ${{ env.FILE_DATE }}
            
            Default IP: 192.168.199.253
            Default username: root
            Default password: password
            
            Kernel: 5.15.X
            
            插件列表： 
              ├ amlogic
              ├ ddns
              ├ docker
              ├ filetransfer
              ├ frpc
              ├ OpenClash
              ├ SmartDNS
              ├ ttyd
              ├ KMS 
              └ Zerotier
             
#    - name: Delete workflow runs
#      uses: GitRML/delete-workflow-runs@main
#      with:
#        token: ${{ secrets.GH_TOKEN }}
#        repository: ${{ github.repository }}
#        retain_days: 60
#        keep_minimum_runs: 60
#
#    - name: Remove old Releases
#      uses: dev-drprasad/delete-older-releases@v0.2.0
#      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
#      with:
#        repo:
#        keep_latest: 30
#        delete_tag_pattern:
#        delete_tags: true
#      env:
#        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
